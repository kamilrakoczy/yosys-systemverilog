name: 'main'
run-name: >
  ${{ github.event_name == 'workflow_dispatch' &&
        format('{0}{1}',
          github.ref_name,
          (github.event.inputs.plugins_branch && format('; plugins: {0}', github.event.inputs.plugins_branch) || '')
        )
      || ''
  }}

on:
  workflow_dispatch:
    inputs:
      plugins_branch:
        description: 'yosys-f4pga-plugins branch'
        required: false
        default: ''
  push:
    branches:
      - master
  pull_request:

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    env:
      CC: gcc-9
      CXX: g++-9
      DEBIAN_FRONTEND: noninteractive
      PLUGIN_ASAN: 1

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 1

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt install -y software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update -qq
          sudo apt install -y gcc-9 g++-9 build-essential cmake tclsh ant default-jre swig google-perftools python3 python3-dev python3-pip uuid uuid-dev tcl-dev flex libfl-dev git pkg-config libreadline-dev bison libffi-dev wget ccache
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 1
          sudo update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1
          sudo pip install orderedmultidict
          sudo pip install --upgrade pip
          sudo pip install cmake

      - name: Create Cache Timestamp
        id: cache_timestamp
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD-HH-mm-ss'

      - name: Checkout custom branches in submodules (if requested)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.plugins_branch != ''}}
        run: |
          cd yosys-f4pga-plugins
          git remote add github/antmicro https://github.com/antmicro/yosys-f4pga-plugins.git
          git fetch github/antmicro ${{github.event.inputs.plugins_branch}}
          git checkout FETCH_HEAD

      - name: Build binaries
        run: |
          # Github dropped support for unauthorized git: https://github.blog/2021-09-01-improving-git-protocol-security-github/
          # Make sure we always use https:// instead of git://
          git config --global url.https://github.com/.insteadOf git://github.com/
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          ./build_binaries.sh --build-sv2v
          # By default actions/upload-artifact@v2 do not preserve file permissions
          # tar directory to workaround this issue
          # See https://github.com/actions/upload-artifact/issues/38
          tar -cvf binaries.tar image

      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: binaries
          path: |
            binaries.tar

      - name: Upload load graphs
        uses: actions/upload-artifact@v2
        with:
          name: plots
          path: |
            **/plot_*.svg

  tests-parsing:
    name: Parsing Tests
    uses: ./.github/workflows/parsing-tests.yml
    needs: build-binaries

      #  tests-formal-verification:
      #    name: Formal Verification Tests
      #    uses: ./.github/workflows/formal-verification.yml
      #    needs: build-binaries
      #
      #  tests-large-designs:
      #    name: Large Designs Tests
      #    uses: ./.github/workflows/large-designs.yml
      #    needs: build-binaries
      #
      #  release:
      #    name: Release Package
      #    needs:
      #      - build-binaries
      #      - tests-parsing
      #      - tests-formal-verification
      #      - tests-large-designs
      #    runs-on: ubuntu-20.04
      #    if: ${{github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')}}
      #
      #    steps:
      #      - uses: actions/checkout@v2
      #        with:
      #         # Download complete repository + tags
      #         fetch-depth: 0
      #
      #      - name: Download artifacts
      #        uses: actions/download-artifact@v2
      #        with:
      #          name: binaries
      #
      #      # See https://github.com/actions/upload-artifact/issues/38
      #      - name: Extract
      #        run: tar -xf binaries.tar
      #
      #      - name: Generate tarball and apply TAG
      #        run: |
      #          GIT_VERSION=${GIT_VERSION:-$(git rev-parse --short "$GITHUB_SHA")}
      #          DISTRO_ARCH=$(uname -m)
      #          DISTRO=$(lsb_release --short --id)
      #          DISTRO_RELEASE=$(lsb_release --short --release)
      #          DISTRO_CODENAME=$(lsb_release --short --codename | sed -e's/[^A-Za-z0-9]//g')
      #          FULL_TARBALL=yosys-uhdm-integration-$GIT_VERSION-$DISTRO-$DISTRO_RELEASE-$DISTRO_CODENAME-$DISTRO_ARCH.tar.gz
      #          PLUGIN_TARBALL=yosys-uhdm-plugin-$GIT_VERSION-$DISTRO-$DISTRO_RELEASE-$DISTRO_CODENAME-$DISTRO_ARCH.tar.gz
      #          # Create a tag of form ad2466e-2021-12-06
      #          TAG="${TAG:-$(git show -s --date=short --format=%h-%cd)}"
      #          git tag "$TAG" || true
      #          echo "TAG=$TAG" >> $GITHUB_ENV
      #          ls -lah image
      #          tar -zcvf $FULL_TARBALL image
      #          tar -zcvf $PLUGIN_TARBALL image/share/yosys/plugins/uhdm.so image/share/yosys/plugins/systemverilog.so install_plugin.sh
      #      - name: Get PR data
      #        uses: 8BitJonny/gh-get-current-pr@2.2.0
      #        with:
      #          sha: ${{ github.event.pull_request.head.sha }}
      #        id: release_pr
      #      - name: Deploy release
      #        env:
      #          RELEASE_NAME: >
      #            ${{ steps.release_pr.outputs.pr_found == 'true'
      #                &&
      #                  format('{0}: #{1}: {2}',
      #                         env.TAG,
      #                         steps.release_pr.outputs.number,
      #                         steps.release_pr.outputs.pr_title)
      #                ||
      #                  env.TAG }}
      #          RELEASE_BODY: >
      #            ${{ steps.release_pr.outputs.pr_found == 'true'
      #                &&
      #                  steps.release_pr.outputs.pr_body
      #                ||
      #                  '' }}
      #        uses: svenstaro/upload-release-action@v2
      #        with:
      #          repo_token: ${{ secrets.GITHUB_TOKEN }}
      #          file: yosys-uhdm-*.tar.gz
      #          tag: ${{ env.TAG }}
      #          release_name: ${{ env.RELEASE_NAME }}
      #          body: ${{ env.RELEASE_BODY }}
      #          overwrite: true
      #          file_glob: true
      #
      #  install-plugin:
      #    name: Release Package Installation Test
      #    runs-on: [self-hosted, Linux, X64]
      #    container: debian:sid
      #    needs: release
      #    env:
      #      DEBIAN_FRONTEND: noninteractive
      #      GHA_MACHINE_TYPE: "n2-standard-2"
      #
      #    steps:
      #      - name: Install Yosys and dependencies
      #        run: |
      #          apt update
      #          apt upgrade -y
      #          apt install -y yosys yosys-dev curl jq wget libreadline-dev
      #      - name: Download and extract UHDM plugin
      #        run: |
      #          curl https://api.github.com/repos/antmicro/yosys-uhdm-plugin-integration/releases/latest -L | jq .assets[1] | grep "browser_download_url" | grep -Eo 'https://[^\"]*' | xargs wget -O - | tar -xz
      #      - name: Install it
      #        run: |
      #          ./install_plugin.sh
      #      - name: Run Yosys and load SystemVerilog plugin
      #        run: yosys -p "plugin -i systemverilog"
      #      - name: Run Yosys and load (deprecated) UHDM plugin
      #        run: yosys -p "plugin -i uhdm"
